#cloud-config

# currently, clustering tools are disabled

coreos:
  etcd:
    discovery: <%= node[:etcd][:discovery] %>
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
  units:
    - name: etcd.service
      command: start
    # - name: fleet.service
    #   command: start
    - name: sshd.socket
      content: |
        [Socket]
        ListenStream=<%= node[:sshd][:port] %>
        Accept=yes
        FreeBind=true
    - name: docker.service
      command: start
    - name: jenkins.web.service
      command: start
      content: |
        [Unit]
        Description=Jenkins
        After=docker.service
        Requires=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/bin/sh -c '/usr/bin/docker kill jenkins || /bin/true'
        ExecStartPre=/bin/sh -c '/usr/bin/docker rm jenkins || /bin/true'
        ExecStartPre=/bin/sh -c '/usr/bin/ls /var/jenkins_home 2> /dev/null 2>&1 || /usr/bin/mkdir /var/jenkins_home'
        ExecStartPre=/bin/sh -c '/usr/bin/chown 1000 /var/jenkins_home'
        ExecStartPre=/usr/bin/docker pull kidscannongames/jenkins
        ExecStart=/usr/bin/docker run --name jenkins -p 8080:8080 -v /home/core/jenkins_home:/var/jenkins_home kidscannongames/jenkins
        ExecStop=/usr/bin/docker stop jenkins
        ExecStopPost=/usr/bin/docker kill jenkins
    - name: vulcan.service
      command: start
      content: |
        [Unit]
        Description=HTTP proxy
        After=docker.service
        After=iptables-restore.service
        Requires=docker.service
        Requires=etcd.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/bin/sh -c '/usr/bin/docker kill vulcan  || /bin/true'
        ExecStartPre=/bin/sh -c '/usr/bin/docker rm vulcan || /bin/true'
        ExecStartPre=/usr/bin/docker pull mailgun/vulcand:v0.8.0-beta.2
        ExecStart=/bin/sh -c '/usr/bin/docker run \
          --rm \
          --name vulcan \
          -p 80:80 \
          -p 8182:8182 \
          mailgun/vulcand:v0.8.0-beta.2 \
          /go/bin/vulcand \
          -apiInterface=0.0.0.0 \
          -interface=0.0.0.0 \
          -etcd=http://$private_ipv4:4001 \
          -port=80 \
          -apiPort=8182'
        ExecStop=/usr/bin/docker stop vulcan
        ExecStopPost=/usr/bin/docker kill vulcan
    - name: iptables-restore.service
      enable: true
users:
  - name: core
    passwd: <%= node[:users][:core][:passwd] %>
    groups:
      - sudo
      - docker
    coreos-ssh-import-github: <%= node[:users][:core][:coreos_ssh_import_github] %>
write_files:
  - path: /etc/ssh/sshd_config
    permissions: 0600
    owner: root:root
    content: |
      # Use most defaults for sshd configuration.
      UsePrivilegeSeparation sandbox
      Subsystem sftp internal-sftp
      ClientAliveInterval 180

      PermitRootLogin no
      MaxAuthTries 3
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      AllowUsers core
  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: root:root
    content: |
      *filter
      :INPUT DROP [0:0]
      :FORWARD DROP [0:0]
      :OUTPUT ACCEPT [0:0]
      -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
      -A INPUT -p tcp ! --syn -m state --state NEW -j DROP
      -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
      -A INPUT -i lo -j ACCEPT
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -i eth1 -j ACCEPT
      -A INPUT -i docker0 -j ACCEPT
      -A FORWARD -i docker0 -o eth1 -j ACCEPT
      -A FORWARD -o docker0 -i eth1 -j ACCEPT
      -A INPUT  -i docker0 -p tcp --dport 4001 -m state --state NEW,ESTABLISHED -j ACCEPT
      -A OUTPUT -o docker0 -p tcp --sport 4001 -m state --state ESTABLISHED -j ACCEPT
      -A OUTPUT -o eth1 -p tcp --dport 4001 -m state --state NEW,ESTABLISHED -j ACCEPT
      -A INPUT  -i eth1 -p tcp --sport 4001 -m state --state ESTABLISHED -j ACCEPT
      -A INPUT  -i eth1 -p tcp --dport 4001 -m state --state NEW,ESTABLISHED -j ACCEPT
      -A OUTPUT -o eth1 -p tcp --sport 4001 -m state --state ESTABLISHED -j ACCEPT
      # allow ping
      -A INPUT -p icmp -j ACCEPT
      # services
      -A INPUT -p tcp -m tcp --dport <%= node[:sshd][:port] %> -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
      # allow inbound packets
      -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
      -P INPUT DROP
      -P OUTPUT ACCEPT
      COMMIT
